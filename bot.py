# -*- coding: utf-8 -*-

# import config
import os
import telebot
import sqlite3
import secrets
import re
from idlelib import query
from datetime import datetime
from telebot import (apihelper, types)
# from config import (token, socks5)
from settings import *


apihelper.proxy = {'https': socks5}
bot = telebot.TeleBot(token)
print('—Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç...')
user = bot.get_me()

@bot.message_handler(commands=['start'])
def send_welcome(message):
    if message.chat.type == 'private':
        start_param = message.text.split()
        if len(start_param) == 1:
            print('–Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–ø—É—Å–∫–∞')
            bot.send_message(message.chat.id, text='–ü—Ä–∏–≤–µ—Ç! –Ø –°–∞–Ω—Ç–∞-–±–æ—Ç, –ø–æ–º–æ–≥—É –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π '
                                                   '—Ä–æ–∑—ã–≥—Ä—ã—à –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏!')
            keyboard = types.InlineKeyboardMarkup(row_width=2)  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —à–∏—Ä–∏–Ω–æ–π –≤ 2 –∫–Ω–æ–ø–∏ –≤ —Ä—è–¥—É
            key_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yes_group')
            key_no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no_group')
            keyboard.add(key_yes, key_no)  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –æ–¥–∏–Ω —Ä—è–¥
            # keyboard.add(key_no) # –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
            question = '–•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞?'
            bot.send_message(message.from_user.id, text=question, reply_markup=keyboard)
            # bot.register_next_step_handler(message, new_group)
        else:
            print('–µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—É—Å–∫–∞:')
            print(start_param[1])
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ –µ—Å—Ç—å –≤ –ë–î –∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞ (—Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–µ –±—ã–ª–æ)
            # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î (–æ–±—ä–µ–∫—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è) - –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—é –Ω–∏–≥–¥–µ
            conn = sqlite3.connect("santa.db")
            # —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Cursor –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –µ–≥–æ –º–µ—Ç–æ–¥–æ–º execute()
            curs = conn.cursor()
            # —Å–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å –≥—Ä—É–ø–ø–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–Ω–∞—á–µ —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞
            curs.execute('SELECT * FROM Groups WHERE link=:link', {'link': start_param[1]})
            group_exists = curs.fetchall()
            print(f'–µ—Å—Ç—å –≥—Ä—É–ø–ø–∞: {group_exists}')
            # print(f'—Å—Ç–∞—Ç—É—Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞: raffle = {group_exists[0][3]}') # –∫–æ–¥ –ø–∞–¥–∞–µ—Ç, —Ç.–∫ –≥—Ä—É–ø–ø—ã –µ—â–µ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å
            print(f'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø: {len(group_exists)}')

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ raffle (group_exists[0][3]) —Ä–∞–≤–Ω–æ 0 (—Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–µ –±—ã–ª–æ)
            if len(group_exists) == 1 and group_exists[0][3] == 0:
                # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î, –∑–∞–Ω–æ—Å–∏–º –µ–≥–æ —Ç—É–¥–∞
                conn = sqlite3.connect("santa.db")
                curs = conn.cursor()
                curs.execute('SELECT * FROM Users WHERE tg_id=:tg_id', {'tg_id': message.chat.id})
                user_exists = curs.fetchall()
                print(f'–µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_exists}')
                print(f'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_exists)}')

                # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î, –∑–∞–Ω–æ—Å–∏–º –µ–≥–æ —Ç—É–¥–∞
                if len(user_exists) == 0:
                    curs.execute('INSERT INTO Users(tg_id, username, first_name, last_name, current_group) '
                                 'VALUES (:tg_id, :username, :first_name, :last_name, :current_group)',
                                 {'tg_id': message.chat.id, 'username': message.chat.username,
                                  'first_name': message.chat.first_name, 'last_name': message.chat.last_name,
                                  'current_group': start_param[1]})
                # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                # –Ω–∞ —Å–ª—É—á–∞–π –µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –¥—Ä—É–≥–æ–π —Å—Å—ã–ª–∫–µ
                else:
                    curs.execute('UPDATE Users SET username=:username, first_name=:first_name, last_name=:last_name, current_group=:current_group '
                                 'WHERE tg_id=:tg_id', {'username': message.chat.username,
                                  'first_name': message.chat.first_name, 'last_name': message.chat.last_name,
                                  'current_group': start_param[1], 'tg_id': message.chat.id})

                # —É–∑–Ω–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                curs.execute('SELECT id FROM Users WHERE tg_id=:tg_id', {'tg_id': message.chat.id})
                user_id = curs.fetchall()
                print(f'user_id = {user_id[0][0]}')
                print(f'group_id = {group_exists[0][0]}')

                # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç –≤ –ë–î (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –ø–æ —Å—Å—ã–ª–∫–µ –≤–ø–µ—Ä–≤—ã–µ)
                curs.execute('SELECT * FROM Relations_user_group WHERE user_id=:user_id AND group_id=:group_id',
                             {'user_id': user_id[0][0], 'group_id': group_exists[0][0]})
                relation_exists = curs.fetchall()
                print(f'–µ—Å—Ç—å —Å–≤—è–∑—å: {relation_exists}')
                if len(relation_exists) == 0:
                    curs.execute('INSERT INTO Relations_user_group(user_id, group_id) '
                                 'VALUES (:user_id, :group_id)',
                                 {'user_id': user_id[0][0], 'group_id': group_exists[0][0]})
                conn.commit()
                curs.close()

                bot.send_message(message.chat.id, text='–ü—Ä–∏–≤–µ—Ç! –Ø –°–∞–Ω—Ç–∞-–±–æ—Ç –∏ —Ç—ã –ø—Ä–∏—à–µ–ª –∫–æ –º–Ω–µ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é! '
                                                       '–î–ª—è —Ç–≤–æ–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ —É–∂–µ –µ—Å—Ç—å –º–µ—Å—Ç–æ –ø–æ–¥ —ë–ª–∫–æ–π!')

                # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                keyboard = types.InlineKeyboardMarkup(row_width=2)
                key_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yes_part')
                key_no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no_part')
                keyboard.add(key_yes, key_no)
                question = '–ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ?'
                bot.send_message(message.from_user.id, text=question, reply_markup=keyboard)
            elif len(group_exists) == 1 and group_exists[0][3] == 1:
                bot.send_message(message.chat.id, text='–†–æ–∑—ã–≥—Ä—ã—à –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.'
                                                       '–¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –∫–æ–º–∞–Ω–¥–æ–π /newgroup.')
            else:
                bot.send_message(message.chat.id, text='–°—Å—ã–ª–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.')
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            conn.commit()
            # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ cursor
            curs.close()

    else:
        bot.send_message(message.chat.id, '–£–ø—Å. –°–∞–Ω—Ç–∞-–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Ç-–∞-—Ç–µ—Ç.')
    logmess(message)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == 'yes_group':
        # —Å–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        get_group_name(call.message)
        # –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –∏–ª–∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
    elif call.data == 'no_group':
        bot.send_message(call.message.chat.id, text='–æ–∫. /newgroup –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è '
                                                    '–∫ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø–µ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç –≤–µ–¥—É—â–µ–≥–æ')
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    elif call.data == 'yes_part':
        # –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è –Ω–∞ 1
        conn = sqlite3.connect("santa.db")
        curs = conn.cursor()

        print('---------------')
        # –≤—Å–ø–æ–º–∏–Ω–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        curs.execute('SELECT id, current_group FROM Users WHERE tg_id=:tg_id', {'tg_id': call.message.chat.id})
        current_user = curs.fetchall()
        print(current_user)
        print(f'user_id = {current_user[0][0]}')
        print(f'group_link = {current_user[0][1]}')
        # –≤—Å–ø–æ–º–∏–Ω–∞–µ–º id –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–∏—à—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        curs.execute('SELECT id FROM Groups WHERE link=:link', {'link': current_user[0][1]})
        group_id = curs.fetchall()
        print(group_id[0][0])
        print('-----------------')

        # –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è –Ω–∞ 1 –≤ —Ç–∞–±–ª–∏—Ü–µ —Å–≤—è–∑–µ–π
        curs.execute('UPDATE Relations_user_group SET participation=:participation '
                     'WHERE user_id=:user_id AND group_id=:group_id', {'participation': 1,
                                                                       'user_id': current_user[0][0], 'group_id': group_id[0][0]})
        conn.commit()
        curs.close()
        bot.send_message(call.message.chat.id, text='(–ø–æ—Ç–æ–º —Å–ø—Ä–æ—à—É —É —Ç–µ–±—è –ø–æ–∂–µ–ª–∞–Ω–∏–µ üéÅ)')
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

    elif call.data == 'no_part':
        bot.send_message(call.message.chat.id, text='–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –Ω–∞–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É /participate.')
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    logcall(call)


def get_group_name(message): # –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    bot.send_message(message.chat.id, text='–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ. '
                                           '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å–æ —Å–ª–µ—à–∞.')
    bot.register_next_step_handler(message, link_generation)
    logmess(message)

def link_generation(message):  # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
    print(message.text[0])
    print(f'–Ω–∞–∑–≤–∞–Ω–∏–µ: {message.text}')
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ (–∏ –æ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ)
    conn = sqlite3.connect("santa.db")
    curs = conn.cursor()
    curs.execute('SELECT id FROM Users WHERE tg_id=:tg_id', {'tg_id': message.chat.id})
    user_id = curs.fetchall()
    print(user_id)
    # —Ä–∞–∑–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä - —Ä–∞–∑–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    curs.execute('SELECT * FROM Groups WHERE leader_id=:leader_id and title=:title and raffle=:raffle',
                 {'leader_id': user_id[0][0], 'title': message.text, 'raffle': 0})
    group_exists = curs.fetchall()

    if message.text[0] == '/' or len(group_exists) != 0:
        bot.send_message(message.chat.id, text='–ü—Ä–æ–∫–∞–∑–Ω–∏–∫! –≠—Ç–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã. '
                                               '–ü–µ—Ä–µ–π–¥–∏ –ø–æ /newgroup, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –≤ –±—É–¥—É—â–µ–º. '
                                               '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö —Ç–≤–æ–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø.')
    else:
        # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ —Ç—É—Ç
        link_part = secrets.token_urlsafe(12)
        print(f'—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å —Å—Å—ã–ª–∫–∏: {link_part}')
        link_full = 'https://t.me/shanta_bot?start='+link_part
        print(f'–ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link_full}')

        # –≤—Å–µ—Ö –≤ –ë–î!
        curs.execute('SELECT * FROM Users WHERE tg_id=:tg_id', {'tg_id': message.chat.id})
        user_exists = curs.fetchall()
        # –µ—Å–ª–∏ –≤–µ–¥—É—â–µ–≥–æ –Ω–µ—Ç –≤ –ë–î, –∑–∞–Ω–æ—Å–∏–º –µ–≥–æ —Ç—É–¥–∞
        if len(user_exists) == 0:
            curs.execute('INSERT INTO Users(tg_id, username, first_name, last_name, current_group) '
                         'VALUES (:tg_id, :username, :first_name, :last_name, :current_group)',
                         {'tg_id': message.chat.id, 'username': message.chat.username,
                          'first_name': message.chat.first_name, 'last_name': message.chat.last_name,
                          'current_group': link_part})
        # –µ—Å–ª–∏ –≤–µ–¥—É—â–∏–π –µ—Å—Ç—å –≤ –ë–î, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å–ª—É—á–∞–π –µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        # –∏–ª–∏ –ø—Ä–∏—Ö–æ–¥–∞ –ø–æ –¥—Ä—É–≥–æ–π —Å—Å—ã–ª–∫–µ
        else:
            curs.execute('UPDATE Users SET username=:username, first_name=:first_name, '
                         'last_name=:last_name, current_group=:current_group '
                         'WHERE tg_id=:tg_id', {'username': message.chat.username,
                         'first_name': message.chat.first_name, 'last_name': message.chat.last_name,
                         'current_group': link_part, 'tg_id': message.chat.id})
        # —É–∑–Ω–∞–µ–º id –≤–µ–¥—É—â–µ–≥–æ, –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã–π –≤ –ë–î (–∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç)
        curs.execute('SELECT id FROM Users WHERE tg_id=:tg_id', {'tg_id': message.chat.id})
        user_id = curs.fetchall()
        # –∑–∞–Ω–æ—Å–∏–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –≤ —Ç–∞–±–ª–∏—Ü—É Group
        curs.execute('INSERT INTO Groups(title, link, raffle, leader_id) '
                     'VALUES (:title, :link, :raffle, :leader_id)',
                     {'title': message.text, 'link': link_part,
                      'raffle': 0, 'leader_id': user_id[0][0]})
        # —É–∑–Ω–∞–µ–º id –≥—Ä—É–ø–ø—ã, –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã–π –≤ –ë–î (–∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç)
        curs.execute('SELECT id FROM Groups WHERE link=:link', {'link': link_part})
        group_new = curs.fetchall()
        print(f'id –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã: {group_new[0][0]}')
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å –≤–µ–¥—É—â–µ–≥–æ –∏ –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç –≤ –ë–î (–Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø—Ä–∏—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ)
        curs.execute('SELECT * FROM Relations_user_group WHERE user_id=:user_id AND group_id=:group_id',
                     {'user_id': user_id[0][0], 'group_id': group_new[0][0]})
        relation_exists = curs.fetchall()
        if len(relation_exists) == 0:
            # —Å—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è –≤ 1
            curs.execute('INSERT INTO Relations_user_group(user_id, group_id, participation) '
                         'VALUES (:user_id, :group_id, :participation)',
                         {'user_id': user_id[0][0], 'group_id': group_new[0][0], 'participation': 1})

        bot.send_message(message.chat.id, text=f'üéÑ –ì–æ–¥–∏—Ç—Å—è-—è–≥–æ–¥–∏—Ü–∞! –ì—Ä—É–ø–ø–∞ "{message.text}" —Å–æ–∑–¥–∞–Ω–∞!\n\n'
                                               f'üéÑ –í–æ—Ç —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –¥–ª—è —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π: '
                                               f'{link_full}.\n\n'
                                               f'üéÑ –ß—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∫ –ø–æ–¥–∞—Ä–∫—É –∏—Å–ø–æ–ª—å–∑—É–π /enterwish.\n'
                                               f'üéÑ –î–ª—è –æ—Ç–º–µ–Ω—ã —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ: /leavegame.\n\n'
                                               f'üéÑ –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∂–µ–ª–∞—é—â–∏—Ö —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à '
                                               f'–∫–æ–º–∞–Ω–¥–æ–π /rungame.\n\n')
    conn.commit()
    curs.close()
    logmess(message)


@bot.message_handler(commands=['help'])
def send_welcome(message):
    if message.chat.type == 'private':
        bot.send_message(message.chat.id, text='/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üéÑ\n'
                                               '/help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å üéÑ\n'
                                               '/newgroup - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ üéÑ (*)\n'
                                               '/participation - –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ üéÑ (*)\n'
                                               '/leavegroup - –≤—ã–π—Ç–∏ –∏–∑ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ üéÑ (*)\n'
                                               '/enterwish - –≤–≤–µ—Å—Ç–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ üéÑ (*)\n'
                                               '/rungame - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à (–¥–ª—è –≤–µ–¥—É—â–µ–≥–æ) üéÑ (*)')
    else:
        bot.send_message(message.chat.id, text='–£–ø—Å. –°–∞–Ω—Ç–∞-–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Ç-–∞-—Ç–µ—Ç.')
    logmess(message)


@bot.message_handler(commands=['rungame'])
def send_welcome(message):
    if message.chat.type == 'private':
        bot.send_message(message.chat.id, text='(–∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫ –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ!)')
        # –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ –±–¥
    else:
        bot.send_message(message.chat.id, text='–£–ø—Å. –°–∞–Ω—Ç–∞-–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Ç-–∞-—Ç–µ—Ç.')
    logmess(message)


# # –±–æ—Ç –¥—Ä–∞–∑–Ω–∏—Ç—Å—è
# @bot.message_handler(func=lambda message: True)
# def echo_all(message):
#     # bot.reply_to(message, message.text)  # –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
#     bot.send_message(message.chat.id, message.text)  # –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

# # –±–æ—Ç —Ä—É–≥–∞–µ—Ç—Å—è
# @bot.message_handler(func=lambda message: True)
# def any_message(message):
#     bot.reply_to(message, "–°–∞–º {!s}".format(message.text))
#
# # –±–æ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–µ —Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
# @bot.edited_message_handler(func=lambda message: True)
# def edit_message(message):
#     bot.edit_message_text(chat_id=message.chat.id,
#                           text= "–°–∞–º {!s}".format(message.text),
#                           message_id=message.message_id + 1)


def logmess(message):
    print(f'\nmessage: {message}') # –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –≤—ã–≤–æ–¥
    print('\n***')
    print(datetime.now())
    print(f'{message.chat.first_name} {message.chat.last_name} '
          f'({message.chat.username} id={message.chat.id}) –ø–∏—à–µ—Ç:\n{message.text}\n')

def logcall(call):
    print(f'\ncall: {call}')


print('—Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç...')
if __name__ == '__main__':
    bot.polling(none_stop=True, interval=0, timeout=20) # –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∞–≤–∏—Ç—å, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –≤—ã–∫–ª—é—á–∞–ª—Å—è –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π

print('—Å–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω...')